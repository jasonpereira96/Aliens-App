/**
 * 
 * urls for tomorrow
 * https://www.zoho.com/crm/developer/docs/api/oauth-overview.html#how
 * https://www.zoho.com/crm/developer/docs/server-side-sdks/node-js.html#Token_Storage
 * https://www.zoho.com/crm/developer/docs/nodejs-sdk/module-samples.html?src=get_records
 * https://www.zoho.com/crm/developer/docs/api/access-refresh.html
 * https://medium.com/swlh/weirded-out-by-zoho-crm-api-6e3fd637237d
 * 
 * 
 * 
 * we have to use a self client since we do not have a redirect url
 * call initialize() before doing anything for the tokens
 * the code that is spontaneously generated by the self client is the grant token
 * I think any ONE of the 2 methods - generateAuthTokenfromRefreshToken() OR generateAuthTokens() can be used
 * THE GRANT TOKEN CAN BE USED TO GENERATE ACCESS AND REFRESH TOKENS - THESE PERSIST IN THE DATABASE AND CAN BE USED TO CALL THE API
 * A refresh token is actually an API key - fuck!
 * 
 * THERE IS A BUG IN THEIR SYSTEM. INITIALIZATION WITH CONFIG OBJECT DOESN'T WORK
 * Now before the grant token expires you need to hurry up and generate a referesh token. This is the part that is really cryptic in the documentation and was the source of most grief. What they call a refresh_token is a persistent token that can be used to generate access tokens perpetually, a-la API key.
 * 
 * THERE may be a problem in their file persistence module - cause it works properly with mysql
 * 
 * 
 * Access tokens expire after one hour 
 * 
 */


const zcrmsdk = require('zcrmsdk');
const test_module = require('./file_persistence.js');

console.log(test_module.PI);
console.log('OK');
var config = {
    "client_id": "1000.BUFGCCXG6O7Y4KNBHKK8QAFYF7WP1V",
    "client_secret": "80b9335a7fbe8496e65d98014f13d639e1cc262ee3",
    "redirect_uri": "https://www.thealiens.org",
    // "refresh_token": "1000.6957e5e043f65b0435ef3117964d1ba8.0cad71154842d0ec85420b12c2c61d5c",
    // "iamurl": "optional {string}",
    // "base_url": "optional {string}",
    "user_identifier": "akash@thealiens.org",
    // "mysql_module": "optional {string}",
    // "mysql_username": "optional {string}",
    // "mysql_password": "optional {string}
};

var user_identifier = 'akash@thealiens.org';
var grant_token = '1000.ba237411757dbc934222b9ff8893cd72.adbd23ce82fd8671f5d37ce54063fbe1'; //is the spontaenous code generated from self client
// var refresh_token;
// zcrmsdk.setClientId(config.client_id);
// zcrmsdk.setClientSecret(config.client_secret);
// zcrmsdk.setRedirectURL(config.redirect_uri);
// zcrmsdk.setUserIdentifier(config.user_identifier);
zcrmsdk.setBaseURL('www.zohoapis.in');
zcrmsdk.initialize();
console.log('initialized');

// zcrmsdk.setBaseURL('www.zohoapis.in');
/* zcrmsdk.generateAuthTokens(user_identifier, grant_token).then(function (auth_response) {
    console.log("access token :" + auth_response.access_token);
    console.log("refresh token :" + auth_response.refresh_token);
    console.log("expires in :" + auth_response.expires_in);
    refresh_token = auth_response.refresh_token;
}); */
/* var user_identifier = 'akash@thealiens.org';
crmclient.initialize();

refresh_token = '1000.3d39f52bd393382b68d0283253a865ba.5f02866754d9bdffedb81aa500903be0';
crmclient.generateAuthTokenfromRefreshToken(user_identifier, refresh_token).then(function (auth_response) {
    console.log("access token :" + auth_response.access_token);
    console.log("refresh token :" + auth_response.refresh_token);
    console.log("expires in :" + auth_response.expires_in);
});
 */

var input = {};
input.module = "Leads";
var params = {};
params.page = 0;
params.per_page = 5;
input.params = params;
zcrmsdk.API.MODULES.get(input).then(function (response) {
    var result = "Leads";
    var data = response.body;
    console.log(data);
    data = JSON.parse(data);
    data = data.data;
    for (i in data) {
        var record = data[i];
        var name = record.Full_Name;
        result += "" + name + "";
    }
    result += "";
}).catch(function(error){
    console.log(error);
});




/* var user_identifier = 'akash@thealiens.org';
var grant_token = '1000.4886f945e27a20d09f1b15002ba2b716.301ed841c7f16dd053b30c89a49de830';
crmclient.generateAuthTokens(user_identifier,grant_token).then(function(auth_response){
    console.log("access token :"+auth_response.access_token);
    console.log("refresh token :"+auth_response.refresh_token);
    console.log("expires in :"+auth_response.expires_in);
});

var refresh_token = '1000.956d78a4452d42538f5ec82e6ee70a1e.f5e58900f1dcce9ff09555a13c513b89';
crmclient.generateAuthTokenfromRefreshToken(user_identifier, refresh_token).then(function (auth_response) {ok
    console.log("access token :" + auth_response.access_token);
    console.log("refresh token :" + auth_response.refresh_token);
    console.log("expires in :" + auth_response.expires_in);
}); */

/*
console.log("ok");
crmclient.initialize(config).then(function () {
    console.log('initialized');
}).then(function () {
    var input = {};
    input.module = 'Leads';

    var params = {};
    // See the list of possible parameters in the 'Parameters' section of the API help page
    params.page = 0;
    params.per_page = 5;

    var headers = {};
    // See the list of possible headers in the 'Request Headers' section of the API help page
    headers['If-Modified-Since'] = '2019-01-07T14:56:33+05:30';


    input.params = params;
    input.headers = headers;

    crmclient.API.MODULES.get(input).then(function (response) {
        console.log('response');
        // console.log(response);

        // Response of the API call is returned in the 'body'

        // Records data value available as JSON Array of the 'data' key of the JSON response
        // Each JSON object of the array corresponds to a record

        response_data = JSON.parse(response.body).data;

        // Iterating the JSON array
        for (record in response_data) {

            // Use response_data[record].<api-name of field> to obtain a specific field value
            // Sample API names: Full_Name, Email
            // List of all available keys of the response can be seen in the JSON object corresponding to
            // a record. The entire object containig all keys can be obtained using 'response_data[record]'

            console.log(response_data[record].Full_Name);
        }

        // Information value regarding the processed request available in the 'info' key of the JSON response
        // Sample field values of the 'info' of the response: per_page, count, page, more_records

        response_info = JSON.parse(response.body).info;
        console.log(response_info);
        // console.log(response_info.more_records);

    });


    console.log("START");

});


 */